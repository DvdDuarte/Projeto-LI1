-- | Este módulo define funções comuns da Tarefa 2 do trabalho prático.
module Tarefa2_2019li1g126 where

import LI11920
import Control.Concurrent
import Tarefa0_2019li1g126
-- * Testes

-- | Testes unitários da Tarefa 2.
--
-- Cada teste é um triplo (/identificador do 'Jogador'/,/'Jogada' a efetuar/,/'Estado' anterior/).
--testesT2 :: [(Int,Jogada,Estado)]
--testesT2 = [,,]

-- * Funções principais da Tarefa 2.

-- | Efetua uma jogada. 
{--
     jogada :: Int -- ^ O identificador do 'Jogador' que efetua a jogada.
       -> Jogada -- ^ A 'Jogada' a efetuar.
       -> Estado -- ^ O 'Estado' anterior.
       -> Estado -- ^ O 'Estado' resultante após o jogador efetuar a jogada.

jogada :: Int -> Jogada -> Estado -> Estado -- ^ O 'Estado' resultante após o jogador efetuar a jogada.
jogada njogador x = case x of 
	       Acelera           -> jogadaAcelera
	       Desacelera        -> jogadaDesacelera
           Movimenta Direcao -> jogadaMovimenta
           Dispara           -> jogadorDispara 
    where njogador = encontraIndiceLista (Jogador)



--jogador1 = Jogador 0 2.3 0 5 (Chao True)
--jogador2 = Jogador 1 0   0 5 (Chao False)
--}

--em graus
inclinacaoPecaAnterior:: Peca -> Float
inclinacaoPecaAnterior (Recta piso altura) = (((pi/2)*180)/pi)
inclinacaoPecaAnterior (Rampa piso alturainicial alturaf) | (alturaf >= alturainicial) = (((atan(fromIntegral (alturaf)))*180)/pi)
                                                          | (alturaf <  alturainicial) = (((atan(fromIntegral (alturainicial)))*180)/pi)



alturaAnterior::Peca->Int
alturaAnterior (Recta piso altura) = altura
alturaAnterior (Rampa piso alturai alturaf) = alturai 



--Quando um jogador morre, a mota para instantaneamente e o seu timeout para renascer é inicializado a 1.0. 


-- Quando um jogador no Chao dispara cola, o piso da peça anterior àquela em que se situa fica com cola, 
-- e perde uma munição (mas só se ele tiver munições suficientes e se não se encontrar na primeira peça da pista).

jogadaDispara:: Int -> Jogador->Estado->Estado
jogadaDispara njogador (Jogador x y z t m) (Estado mapa jogs) | t>0 && ((m==(Chao True))||(m==(Chao False))) = (Estado (atualizaPosicaoMatriz (x,floor(y-1)) peca mapa)) 
                                                              | otherwise = 0
                                                where peca = identificaPecaAnterior njogador (Jogador x y z t m) (Estado mapa jogs)


identificaPecaAnterior:: Int-> Jogador ->Estado-> Peca
identificaPecaAnterior njogador (Jogador x y z t m) (Estado mapa jogs) = encontraPosicaoMatriz (x,floor(y-1)) mapa                                                          

--jogadaDispara njogador (Jogador x y z t m) (Estado mapa jogs) | && t>0 && ((m==(Chao True))||(m==(Chao False))) = Estado (atualizaPosicaoMatriz (x,floor (y-1)) peca mapa)
--exemplo= 1 (Jogador 0 2 0 0 (Chao True)) (Estado [Recta Terra 0,Recta Lama 0, Recta Relva 0] [Jogador 0 2 0 0 (Chao True)])


{--
----jogadaAcelera njogador Acelera (Estado mapa jogs) = Acelera njogador (encontraIndiceLista njogador jogs ) (Estado mapa jogs )---
--}
jogadaAcelera::Int -> Jogador->Estado-> Estado
jogadaAcelera njogador (Jogador x y z t (Chao False)) (Estado mapa jogs ) = Estado mapa (atualizaIndiceLista njogador (Jogador x y z t (Chao True)) jogs)
jogadaAcelera j e f = f

jogadaDesacelera::Int -> Jogador->Estado->Estado
jogadaDesacelera njogador (Jogador x y z t (Chao True)) (Estado mapa jogs ) = Estado mapa (atualizaIndiceLista njogador (Jogador x y z t (Chao False)) jogs)
jogadaDesacelera j e f = f

{--njogador ncola |ncola > 0 = (ncola-1)
                                     |otherwise = 0 
--}
