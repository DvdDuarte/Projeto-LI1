-- | Este módulo define funções comuns da Tarefa 3 do trabalho prático.
module Tarefa3_2019li1g126 where

import LI11920
import Tarefa0_2019li1g126
import Tarefa1_2019li1g126
-- * Testes

-- | Testes unitários da Tarefa 3.
--
-- Cada teste é um 'Mapa'.
testesT3 :: [Mapa]
testesT3 = [
            [
             [Recta Terra 0, Recta Relva 0], 
             [Recta Terra 0, Recta Terra 0], 
             [Recta Terra 0, Recta Terra 0], 
             [Recta Terra 0, Recta Terra 0], 
             [Recta Terra 0, Rampa Terra 0 2], 
             [Recta Terra 0, Rampa Terra 0 1]
            ],
            [
             [Recta Terra 0, Recta Relva 0, Rampa Boost 0 9], 
             [Recta Terra 0, Recta Terra 0, Recta Lama 0], 
             [Recta Terra 0, Recta Terra 0, Rampa Relva 0 2], 
             [Recta Terra 0, Recta Terra 0, Recta Terra 0], 
             [Recta Terra 0, Rampa Terra 0 2, Rampa Relva 2 1], 
             [Recta Terra 0, Rampa Terra 0 1, Rampa Boost 1 0] 
            ] 
           ]

-- * Funções principais da Tarefa 3.

-- | Desconstrói um 'Mapa' numa sequência de 'Instrucoes'.
--
-- __NB:__ Uma solução correcta deve retornar uma sequência de 'Instrucoes' tal que, para qualquer mapa válido 'm', executar as instruções '(desconstroi m)' produza o mesmo mapa 'm'.
--
-- __NB:__ Uma boa solução deve representar o 'Mapa' dado no mínimo número de 'Instrucoes', de acordo com a função 'tamanhoInstrucoes'.
desconstroi :: Mapa -> Instrucoes
desconstroi mapa = (gInstrucoes mapa)
           

{--
indices::[a]->[Int]
indices [x]= [0]
indices (h:t)= [0]++[1..b]
   where b = ((length (h:t))-1)


numeroPista :: Mapa -> (Int,Int) -> Int
numeroPista [] (a,b) = 0
numeroPista (h:t) (a,b) | b <= d -1 = a
                        | otherwise = a + 1
                 
                 where (c,d) = dimensaoMatriz (h:t)\
--}

-- dada uma lista verifica se a cabaeca e igual a um tipo de peca e da a instrucao de acordo com a peca
gerarInstrucao :: Mapa -> Int -> Instrucao 
gerarInstrucao mapa@(((Recta piso alturaf):xs):t) a = Anda [a] piso 
gerarInstrucao mapa@(((Rampa piso alturai alturaf):xs):t) a | (alturai<alturaf) = Sobe [a] piso alturaf
                                                            | (alturai>alturaf) = Desce [a] piso alturai


-- mapa = [pista] = [[peca]]
--gerarinstrucoes e uma funcao que tem que gerar uma [instrucao], ou seja instucoes

gerarInstrucoes :: Mapa -> (Int,Int) -> Int -> Instrucoes
gerarInstrucoes [] _ _ = []
gerarInstrucoes mapa@(h:t) (a,b) d = (gerarInstrucao mapa a) : (gerarInstrucoes listasemprimeirainstrucao (bEs (a,b) d mapa) d)
                              where  listasemprimeirainstrucao | head (listaSemPRimeiraInstrucao mapa) == [] = tail (listaSemPRimeiraInstrucao mapa)
                                                               | otherwise = listaSemPRimeiraInstrucao mapa


listaSemPRimeiraInstrucao :: Mapa -> Mapa
listaSemPRimeiraInstrucao [] = []
listaSemPRimeiraInstrucao mapa@(h:t) | h == [] = t
                                     | otherwise = (drop 1 h):t


bEs :: (Int,Int) -> Int -> Mapa -> (Int,Int)
bEs (a,b) d mapa | b +1  <= d  = (a,b+1)
                 | otherwise = (a+1,1)  
             


gInstrucoes :: Mapa -> Instrucoes
gInstrucoes mapa  = gerarInstrucoes mapaSemReTerra0 (0,1) d
                      where d = snd (dimensaoMatriz mapaSemReTerra0)
                            mapaSemReTerra0 = map (drop 1) mapa
{-
padroesHorizontais :: Instrucoes ->  Instrucoes
padroesHorizontais []  = []
padroesHorizontais instrucoes@((Anda [x] piso):t)  | (head instrucoes == head t) = (Repete (vezes+1) [h]) : (padroesHorizontais t )
                                                        | otherwise = (head instrucoes): (padroesHorizontais t )
                                                          where    vezes = (nmrVezes instrucoes 0)
-}
{-
pH :: Instrucoes -> Instrucoes
pH instrucoes = padroesHorizontais instrucoes vezes
                  where vezes = nmrVezes instrucoes
-}
nmrVezes :: Eq a => [a] -> Int -> Int
nmrVezes [] _ = 0
nmrVezes (h:t) x | (h == head t) && ((length (h:t))>0) = x+1 + (nmrVezes t x)
                 | otherwise = 0 
                      
